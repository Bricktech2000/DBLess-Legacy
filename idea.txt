sha256 hash src: https://emn178.github.io/online-tools/sha256.html
Z85 encode src: https://cryptii.com/pipes/hex-to-ascii85
base85 src: https://stackoverflow.com/questions/6008047/why-is-base128-not-used



database structure

root
  |- service 1
  |   |- username 1
  |   |- username 2
  |   |- username 3
  |   '- username n
  |- service 2
  |   |- username 1
  |   |- username 2
  |   |- username 3
  |   '- username n
  |- service 2
  |   |- username 1
  |   |- username 2
  |   |- username 3
  |   '- username n
  '- service n
      |- username 1
      |- username 2
      |- username 3
      '- username n
[...]


The database holds all currently known login domain names and usernames for convenience. This is not strictly necessary. (manual database in .gitignore)

`service` is the name of the service you wish to log into (google). `username` is the username used to log into said service (my.email@gmail.com). `master password` is the master password for child password generation (Password123). `service`, `username` and `master password` are then hashed together to produce a 265-bit SHA hash (9b2d09310b3bf6ba822bc898a4d562334a7c513c6d330a5c758d0dd87c80f2e7), which is converted to Z85 (N>j}33P[6[F?a{fQ$5{gn{<F#z8hJ7B=u<.E1p!J) and then used as a child password for said service and username.

The beauty of this system is that no real database is needed. If the service and the username for said service are known (which they are), then the password can be generated using the master password. If someone finds the database of services and usernames, they cannot get in since they do not know the master password. The master password is not stored anywhere because it does not need to be; the child passwords are derived from the master password on-the-fly, as requested by the user. Even if a database leak happens, the gibberish child password would need to be un-hashed, which is not feasible. However, if the database leak were to store passwords in plain text, it would need to be converted back to bytes, and then un-hashed for a second time before revealing the master password, which is also not feasible.


Here is an example:

service:         google
username:        my.email@gmail.com
master password: Password123

SHA-1 hashes: 759730a97e4373f3a0ee12805db065e3a4a649a5, f117dbdcc444bc6e720027e5ee9b3575218ad2d7, b2e98ad6f6eb8508dd6a14cfa704bad7f05f6fb1
XORed SHA-1:  366961a34cec4a950f8421aa142fea417573f4c3
SHA-256 hash: 9b2d09310b3bf6ba822bc898a4d562334a7c513c6d330a5c758d0dd87c80f2e7
Z85 encode:   N>j}33P[6[F?a{fQ$5{gn{<F#z8hJ7B=u<.E1p!J

The Z85-encoded string is then used as the password for the service.













































































